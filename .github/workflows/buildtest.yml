name: LucideC++ Build Test

on:
  push:
    branches: 
      - '**'       # ทุก branch
  pull_request:
    branches:
      - '**'       # ทุก branch
  workflow_dispatch:   # manual run จากหน้า Actions

jobs:
  build:
    name: Build on ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-latest
            cmake_generator: "Unix Makefiles"
          - os: windows-latest
            cmake_generator: "Visual Studio 17 2022"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install CMake (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install CMake (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      uses: lukka/get-cmake@latest

    - name: Configure CMake (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DBUILD_SHARED_LIBS=ON \
              -DBUILD_EXAMPLES=ON \
              -G "${{ matrix.cmake_generator }}" \
              ..

    - name: Configure CMake (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
              -DBUILD_SHARED_LIBS=ON `
              -DBUILD_EXAMPLES=ON `
              -G "${{ matrix.cmake_generator }}" `
              ..

    - name: Build project
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Test library files (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        cd build
        ls -la
        # Check if shared library was created
        find . -name "*.so" -o -name "*.dylib" | head -5
        # Check if example executable was created
        find . -name "lucide-example" -executable

    - name: Test library files (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        cd build
        dir
        # Check if DLL was created
        Get-ChildItem -Recurse -Filter "*.dll" | Select-Object -First 5
        # Check if example executable was created
        Get-ChildItem -Recurse -Filter "lucide-example.exe"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4   # เปลี่ยนจาก v3 → v4
      with:
        name: build-artifacts-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/**/*.dll
          build/**/*.so
          build/**/*.dylib
          build/**/*.lib
          build/**/*.a
          build/**/lucide-example*
        retention-days: 7


  test-integration:
    name: Integration Test
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Build and test static library
      run: |
        mkdir build-static
        cd build-static
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=OFF \
              -DBUILD_EXAMPLES=ON \
              ..
        cmake --build . --config Release
        
    - name: Build and test shared library
      run: |
        mkdir build-shared
        cd build-shared
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=ON \
              -DBUILD_EXAMPLES=ON \
              ..
        cmake --build . --config Release

    - name: Verify both builds work
      run: |
        echo "Static library build:"
        ls -la build-static/
        echo "Shared library build:"
        ls -la build-shared/
